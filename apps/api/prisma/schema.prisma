// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

model user {
  userId       String   @id @default(auto()) @map("_id") @db.ObjectId
  email        String   @unique
  userName     String?
  hash         String?
  isGoogleAuth Boolean?
  accessToken  String?
  refreshToken String?
  createdAt    DateTime @default(now())
  profile      profile?
}

model profile {
  profileId String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  firstName String?
  lastName  String?
  bio       String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blog      blog[]

  comment comment[]

  userInterests like[]
  user          user   @relation(fields: [userId], references: [userId])
}

model blog {
  blogId      String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  thumbnail   String?
  slug        String     @unique
  views       Int?
  comments    comment[]
  likes       like[]
  author      profile    @relation(fields: [authorId], references: [profileId])
  authorId    String     @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  status      BlogStatus
  publishedAt DateTime?
  deletedAt   DateTime?
}

model comment {
  commentId String   @id @default(auto()) @map("_id") @db.ObjectId
  blogId    String   @db.ObjectId
  profileId String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blog    blog    @relation(fields: [blogId], references: [blogId])
  profile profile @relation(fields: [profileId], references: [profileId])
}

model like {
  interestId String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  blogId     String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  profileId  String   @db.ObjectId

  profile profile @relation(fields: [profileId], references: [profileId])
  blog    blog    @relation(fields: [blogId], references: [blogId])
}

enum BlogStatus {
  DELETED
  DRAFT
  PUBLISHED
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
